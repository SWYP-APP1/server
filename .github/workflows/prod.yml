name: Deploy Spring Boot to EC2 with Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Build the JAR file
      - name: Build JAR
        run: |
          ./gradlew build -x test

      # 3. AWS CLI 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # ECR 리포지토리 리전

      - name: Create firebase-adminsdk.json on server
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: firebase-adminsdk.json
          json: ${{ secrets.FIREBASE_KEY_JSON }}

      # 3. Amazon ECR 로그인
      - name: Create firebase-adminsdk.json on server
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: firebase-adminsdk.json
          json: ${{ secrets.FIREBASE_KEY_JSON }}

      # 4. Amazon ECR 로그인
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build, Tag, and Push Docker Image
        run: |
          docker build --platform linux/amd64 --provenance=false -t ${{ secrets.ECR_REPOSITORY }} .
          docker tag ${{ secrets.ECR_REPOSITORY }}:${{ secrets.ECR_IMAGE_TAG }} ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ secrets.ECR_IMAGE_TAG }}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ secrets.ECR_IMAGE_TAG }}
          
      # 6. EC2에 배포
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          ECR_IMAGE_TAG: ${{ secrets.ECR_IMAGE_TAG }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # SSH 키를 임시 파일로 저장
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # docker-compose.yml을 EC2로 전송
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            docker-compose.yml $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/app/

          # SSH로 EC2에 접속하여 Docker Compose 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
            # ECR에 로그인
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Docker Compose로 컨테이너 실행
            cd app
            docker-compose down
            docker-compose pull # ECR에서 최신 이미지 가져오기
            docker-compose up -d
          EOF

          # 임시 SSH 키 삭제
          rm private_key.pem
package com.swyp.futsal.exception;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;

@Getter
@RequiredArgsConstructor
public enum ErrorCode {
    // Common (400 BAD REQUEST)
    BAD_REQUEST_REQUIRED_PARAMETER_MISSING("COMMON-001", HttpStatus.BAD_REQUEST,
            "BAD_REQUEST_REQUIRED_PARAMETER_MISSING"),
    BAD_REQUEST_INVALID_PARAMETER_FORMAT("COMMON-002", HttpStatus.BAD_REQUEST,
            "BAD_REQUEST_INVALID_PARAMETER_FORMAT"),
    BAD_REQUEST_INVALID_PARAMETER_VALUE("COMMON-003", HttpStatus.BAD_REQUEST, 
            "BAD_REQUEST_INVALID_PARAMETER_VALUE"),
    BAD_REQUEST_INVALID_PAGE_OR_SIZE_VALUE("COMMON-004", HttpStatus.BAD_REQUEST,
            "BAD_REQUEST_INVALID_PAGE_OR_SIZE_VALUE"),

    // Common (500 INTERNAL SERVER ERROR)
    INTERNAL_SERVER_ERROR("COMMON-500", HttpStatus.INTERNAL_SERVER_ERROR, 
            "INTERNAL_SERVER_ERROR"),

    // Auth Domain (401 UNAUTHORIZED)
    UNAUTHORIZED_TOKEN_AUTHENTICATION_FAILED("AUTH-001", HttpStatus.UNAUTHORIZED,
            "UNAUTHORIZED_TOKEN_AUTHENTICATION_FAILED"),
    UNAUTHORIZED_REFRESH_TOKEN_HAS_EXPIRED("AUTH-002", HttpStatus.UNAUTHORIZED,
            "UNAUTHORIZED_REFRESH_TOKEN_HAS_EXPIRED"),
    UNAUTHORIZED_ACCESS_TOKEN_INVALID("AUTH-003", HttpStatus.UNAUTHORIZED, 
            "UNAUTHORIZED_ACCESS_TOOKEN_INVALID"),

    // User Domain
    NOT_FOUND_USER_ID("USER-001", HttpStatus.NOT_FOUND, 
            "NOT_FOUND_USER_ID"),
    CONFLICT_NICKNAME_ALREADY_EXISTS("USER-002", HttpStatus.CONFLICT, 
            "CONFLICT_NICKNAME_ALREADY_EXISTS"),

    // Team Domain
    NOT_FOUND_TEAM_ID("TEAM-001", HttpStatus.NOT_FOUND, 
            "NOT_FOUND_TEAM_ID"),
    CONFLICT_TEAM_NAME_ALREADY_EXISTS("TEAM-002", HttpStatus.CONFLICT, 
            "CONFLICT_TEAM_NAME_ALREADY_EXISTS"),
    FORBIDDEN_TEAM_LEADER_PERMISSION_REQUIRED("TEAM-003", HttpStatus.FORBIDDEN,
            "FORBIDDEN_TEAM_LEADER_PERMISSION_REQUIRED"),
    FORBIDDEN_ONLY_TEAM_MEMBER_REQUIRED("TEAM-004", HttpStatus.FORBIDDEN, 
            "FORBIDDEN_ONLY_TEAM_MEMBER_REQUIRED"),

    // Match Domain
    NOT_FOUND_MATCH_ID("MATCH-001", HttpStatus.NOT_FOUND, 
            "NOT_FOUND_MATCH_ID"),
    FORBIDDEN_DELETE_COMPLETED_MATCH("MATCH-002", HttpStatus.FORBIDDEN, 
            "FORBIDDEN_DELETE_COMPLETED_MATCH"),

    // Match Stats Domain
    NOT_FOUND_MATCH_PARTICIPANT_ID("MATCH-STATS-001", HttpStatus.NOT_FOUND, 
            "NOT_FOUND_MATCH_PARTICIPANT_ID"),
    NOT_FOUND_MATCH_STAT_ID("MATCH-STATS-002", HttpStatus.NOT_FOUND, 
            "NOT_FOUND_MATCH_STAT_ID"),
    BAD_REQUEST_ASSIST_REQUIRES_GOAL("MATCH-STATS-003", HttpStatus.BAD_REQUEST, 
            "BAD_REQUEST_ASSIST_REQUIRES_GOAL"),
    FORBIDDEN_DELETE_GOAL_WITH_ASSIST("MATCH-STATS-004", HttpStatus.FORBIDDEN, 
            "FORBIDDEN_DELETE_GOAL_WITH_ASSIST"),

    // Match Note Domain
    NOT_FOUND_MATCH_NOTE_ID("MATCH-NOTE-001", HttpStatus.NOT_FOUND, 
            "NOT_FOUND_MATCH_NOTE_ID"),
    FORBIDDEN_DELETE_MATCH_NOTE("MATCH-NOTE-002", HttpStatus.FORBIDDEN, 
            "FORBIDDEN_DELETE_MATCH_NOTE"),

    // Vote Domain
    CONFLICT_ALREADY_VOTED("VOTE-001", HttpStatus.CONFLICT, 
            "CONFLICT_ALREADY_VOTED"),
    CONFLICT_VOTE_STATUS_ENDED("VOTE-002", HttpStatus.CONFLICT, 
            "CONFLICT_VOTE_STATUS_ENDED");

    private final String code;
    private final HttpStatus httpStatus;
    private final String message;
}